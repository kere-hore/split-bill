// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  username  String   @unique
  name      String
  email     String   @unique
  phone     String?
  image     String?
  provider  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Split bill relations
  groups         GroupMember[]
  createdGroups  Group[]       @relation("CreatedByUser")
  expenses       Expense[]
  settlements    Settlement[]  @relation("SettlementPayer")
  receivedSettlements Settlement[] @relation("SettlementReceiver")
  
  // Bill relations
  bills          Bill[]
  
  @@index([clerkId])
  @@index([email])
  @@index([createdAt])
}

model Group {
  id             String   @id @default(cuid())
  name           String
  description    String?
  billId         String?  // Link to Bill for allocation
  status         String   @default("outstanding") // outstanding, allocated
  allocationData String?  // JSON string containing allocation breakdown
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  
  creator     User          @relation("CreatedByUser", fields: [createdBy], references: [id], onDelete: Cascade)
  bill        Bill?         @relation(fields: [billId], references: [id], onDelete: SetNull)
  members     GroupMember[]
  expenses    Expense[]
  
  @@index([createdBy])
  @@index([status])
  @@index([createdAt])
  @@index([createdBy, status])
  @@index([billId])
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String // generated ID for both registered and custom users
  name    String // name for all members
  role    String @default("member") // member, admin
  
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId]) // unique user per group
  @@index([groupId])
  @@index([userId])
  @@index([groupId, role])
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("IDR")
  groupId     String
  paidBy      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer       User          @relation(fields: [paidBy], references: [id])
  splits      ExpenseSplit[]
}

model ExpenseSplit {
  id        String  @id @default(cuid())
  expenseId String
  userId    String
  amount    Decimal @db.Decimal(10, 2)
  
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  @@unique([expenseId, userId])
}

model Settlement {
  id         String   @id @default(cuid())
  groupId    String
  payerId    String
  receiverId String
  amount     Decimal  @db.Decimal(10, 2)
  currency   String   @default("IDR")
  status     String   @default("pending") // pending, paid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
  
  payer      User @relation("SettlementPayer", fields: [payerId], references: [id])
  receiver   User @relation("SettlementReceiver", fields: [receiverId], references: [id])
  
  @@index([groupId])
  @@index([payerId])
  @@index([receiverId])
  @@index([status])
  @@index([groupId, status])
  @@index([payerId, status])
}

model Bill {
  id            String   @id @default(cuid())
  merchantName  String
  receiptNumber String?
  date          DateTime
  time          String?
  subtotal      Decimal  @db.Decimal(10, 2)
  serviceCharge Decimal  @db.Decimal(10, 2) @default(0)
  tax           Decimal  @db.Decimal(10, 2) @default(0)
  totalAmount   Decimal  @db.Decimal(10, 2)
  paymentMethod String?
  currency      String   @default("IDR")
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  creator       User           @relation(fields: [createdBy], references: [clerkId])
  groups        Group[]        // Groups that use this bill for allocation
  items         BillItem[]
  discounts     BillDiscount[]
  additionalFees BillFee[]
  
  @@index([createdBy])
  @@index([date])
  @@index([createdAt])
  @@index([merchantName])
}

model BillItem {
  id         String  @id @default(cuid())
  billId     String
  name       String
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  category   String?
  
  bill       Bill              @relation(fields: [billId], references: [id], onDelete: Cascade)
  allocations BillItemAllocation[]
  
  @@index([billId])
  @@index([category])
}

model BillItemAllocation {
  id         String  @id @default(cuid())
  billItemId String
  memberId   String  // GroupMember ID
  quantity   Int     // How many of this item the member consumed
  amount     Decimal @db.Decimal(10, 2) // Calculated amount for this member
  
  billItem   BillItem @relation(fields: [billItemId], references: [id], onDelete: Cascade)
  
  @@unique([billItemId, memberId])
}

model BillDiscount {
  id     String  @id @default(cuid())
  billId String
  name   String
  amount Decimal @db.Decimal(10, 2)
  type   String
  
  bill   Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)
}

model BillFee {
  id     String  @id @default(cuid())
  billId String
  name   String
  amount Decimal @db.Decimal(10, 2)
  
  bill   Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)
}