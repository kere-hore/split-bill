// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  username  String   @unique
  name      String
  email     String   @unique
  phone     String?
  image     String?
  provider  String?  // google, email, etc
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Split bill relations
  groups         GroupMember[]
  createdGroups  Group[]       @relation("CreatedByUser")
  expenses       Expense[]
  settlements    Settlement[]  @relation("SettlementPayer")
  receivedSettlements Settlement[] @relation("SettlementReceiver")
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.ObjectId
  
  creator     User          @relation("CreatedByUser", fields: [createdBy], references: [id])
  members     GroupMember[]
  expenses    Expense[]
}

model GroupMember {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  groupId String @db.ObjectId
  userId  String @db.ObjectId
  role    String @default("member") // member, admin
  
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  amount      Float
  currency    String   @default("IDR")
  groupId     String   @db.ObjectId
  paidBy      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer       User          @relation(fields: [paidBy], references: [id])
  splits      ExpenseSplit[]
}

model ExpenseSplit {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  expenseId String @db.ObjectId
  userId    String @db.ObjectId
  amount    Float
  
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  @@unique([expenseId, userId])
}

model Settlement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String   @db.ObjectId
  payerId    String   @db.ObjectId
  receiverId String   @db.ObjectId
  amount     Float
  currency   String   @default("IDR")
  createdAt  DateTime @default(now())
  
  payer      User @relation("SettlementPayer", fields: [payerId], references: [id])
  receiver   User @relation("SettlementReceiver", fields: [receiverId], references: [id])
}